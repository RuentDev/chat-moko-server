generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("CHATMOKO_URI")
}

enum Role {
  ADMIN
  USER
}

enum MessageType {
  SINGLE_CHAT
  GROUP_CHAT
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String                    @id @default(uuid()) @map("_id")
  email             String                    @unique
  phone             String
  password          String?
  first_name        String?
  middle_name       String?
  last_name         String?
  verification_code String?
  is_active         Boolean                   @default(false)
  is_reported       Boolean                   @default(false)
  is_blocked        Boolean                   @default(false)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime?
  role              Role                      @default(USER) // User role
  conversations     ConversationParticipant[]
  account           Account[]
}

model ConversationParticipant {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  conversationId       String
  hasSeenLatestMessage Boolean
}

model Conversation {
  id           String                    @id @default(uuid()) @map("_id")
  title        String? // Title of the conversation (optional)
  creatorId    String // ID of the conversation creator
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  isPinned     Boolean?
  participants ConversationParticipant[]
  messages     Message[]
}

model Message {
  id                   String        @id @default(uuid()) @map("_id")
  senderId             String
  type                 MessageType   @default(SINGLE_CHAT) // Message type
  content              String
  attachment_thumb_url String? // Thumbnail URL for attachments (optional)
  attachment_url       String? // Attachment URL (optional)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime?
  deletedAt            DateTime?
  isRead               Boolean?
  conversation         Conversation? @relation(fields: [conversationId], references: [id])
  conversationId       String?
}
